; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	c:\gh\sha3\sha3x.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_keccakf_rndc
PUBLIC	_keccakf_rotc
PUBLIC	_keccakf_piln
CONST	SEGMENT
_keccakf_rndc DD 01H
	DD	08082H
	DD	0808aH
	DD	080008000H
	DD	0808bH
	DD	080000001H
	DD	080008081H
	DD	08009H
	DD	08aH
	DD	088H
	DD	080008009H
	DD	08000000aH
	DD	08000808bH
	DD	08bH
	DD	08089H
	DD	08003H
	DD	08002H
	DD	080H
	DD	0800aH
	DD	08000000aH
	DD	080008081H
	DD	08080H
	DD	080000001H
	DD	080008008H
_keccakf_rotc DD 01H
	DD	03H
	DD	06H
	DD	0aH
	DD	0fH
	DD	015H
	DD	01cH
	DD	012H
	DD	016H
	DD	01bH
	DD	02H
	DD	0eH
	DD	01bH
	DD	014H
	DD	01cH
	DD	08H
	DD	019H
	DD	015H
	DD	01fH
	DD	012H
	DD	013H
	DD	01eH
	DD	014H
	DD	016H
_keccakf_piln DD 0aH
	DD	07H
	DD	0bH
	DD	011H
	DD	012H
	DD	03H
	DD	05H
	DD	010H
	DD	08H
	DD	015H
	DD	018H
	DD	04H
	DD	0fH
	DD	017H
	DD	013H
	DD	0dH
	DD	0cH
	DD	02H
	DD	014H
	DD	0eH
	DD	016H
	DD	09H
	DD	06H
	DD	01H
CONST	ENDS
PUBLIC	_SHA3_Transform
; Function compile flags: /Ogspy
;	COMDAT _SHA3_Transform
_TEXT	SEGMENT
_bc$ = -32						; size = 20
_round$ = -12						; size = 4
tv1190 = -8						; size = 4
tv1124 = -4						; size = 4
tv87 = -4						; size = 4
tv1059 = 8						; size = 4
tv847 = 8						; size = 4
_ctx$ = 8						; size = 4
_SHA3_Transform PROC					; COMDAT
; File c:\gh\sha3\sha3x.c
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
; Line 34
	mov	ebx, DWORD PTR _ctx$[ebp]
	push	esi
	push	edi
	xor	edi, edi
	xor	eax, eax
	cmp	DWORD PTR [ebx+212], edi
	jbe	SHORT $LN25@SHA3_Trans
$LL27@SHA3_Trans:
; Line 35
	mov	cl, BYTE PTR [eax+ebx+216]
	xor	BYTE PTR [eax+ebx], cl
	inc	eax
	cmp	eax, DWORD PTR [ebx+212]
	jb	SHORT $LL27@SHA3_Trans
$LN25@SHA3_Trans:
; Line 38
	mov	DWORD PTR _round$[ebp], edi
	cmp	DWORD PTR [ebx+208], edi
	jbe	$LN22@SHA3_Trans
$LL48@SHA3_Trans:
; Line 41
	xor	ecx, ecx
	lea	eax, DWORD PTR [ebx+60]
$LL21@SHA3_Trans:
; Line 42
	mov	edx, DWORD PTR [eax-60]
	xor	edx, DWORD PTR [eax-40]
	xor	edx, DWORD PTR [eax-20]
	xor	edx, DWORD PTR [eax+20]
	xor	edx, DWORD PTR [eax]
	inc	ecx
	mov	DWORD PTR _bc$[ebp+ecx*4-4], edx
	add	eax, 4
	cmp	ecx, 5
	jb	SHORT $LL21@SHA3_Trans
; Line 44
	push	4
	pop	esi
	mov	DWORD PTR tv847[ebp], ebx
	mov	DWORD PTR tv87[ebp], 5
$LL18@SHA3_Trans:
; Line 45
	push	5
	xor	edx, edx
	pop	ecx
	lea	eax, DWORD PTR [esi-3]
	div	ecx
	push	5
	pop	edi
	mov	eax, esi
	push	edi
	mov	ecx, DWORD PTR _bc$[ebp+edx*4]
	xor	edx, edx
	div	edi
	mov	eax, DWORD PTR tv847[ebp]
	rol	ecx, 1
	xor	ecx, DWORD PTR _bc$[ebp+edx*4]
	pop	edx
$LL15@SHA3_Trans:
; Line 47
	xor	DWORD PTR [eax], ecx
	add	eax, 20					; 00000014H
	dec	edx
	jne	SHORT $LL15@SHA3_Trans
; Line 44
	add	DWORD PTR tv847[ebp], 4
	inc	esi
	dec	DWORD PTR tv87[ebp]
	jne	SHORT $LL18@SHA3_Trans
; Line 52
	mov	ecx, DWORD PTR [ebx+4]
$LL12@SHA3_Trans:
; Line 54
	mov	eax, DWORD PTR _keccakf_piln[edx]
; Line 56
	mov	edi, ecx
	mov	ecx, DWORD PTR _keccakf_rotc[edx]
	rol	edi, cl
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	esi, DWORD PTR [eax]
	add	edx, 4
	mov	DWORD PTR _bc$[ebp], esi
	mov	DWORD PTR [eax], edi
; Line 57
	mov	ecx, esi
	cmp	edx, 96					; 00000060H
	jb	SHORT $LL12@SHA3_Trans
; Line 61
	mov	eax, ebx
	mov	DWORD PTR tv1190[ebp], 5
$LL49@SHA3_Trans:
; Line 63
	push	5
	pop	ecx
	mov	esi, eax
	lea	edi, DWORD PTR _bc$[ebp]
	rep movsd
; Line 65
	mov	DWORD PTR tv1059[ebp], 2
	mov	ecx, eax
	mov	DWORD PTR tv1124[ebp], 5
$LL50@SHA3_Trans:
; Line 66
	mov	esi, DWORD PTR tv1059[ebp]
	xor	edx, edx
	push	5
	pop	edi
	lea	eax, DWORD PTR [esi-1]
	div	edi
	mov	eax, esi
	push	5
	pop	esi
	mov	edi, DWORD PTR _bc$[ebp+edx*4]
	xor	edx, edx
	div	esi
	not	edi
	and	edi, DWORD PTR _bc$[ebp+edx*4]
	xor	DWORD PTR [ecx], edi
	add	ecx, 4
	inc	DWORD PTR tv1059[ebp]
	dec	DWORD PTR tv1124[ebp]
	jne	SHORT $LL50@SHA3_Trans
; Line 61
	dec	DWORD PTR tv1190[ebp]
	mov	eax, ecx
	jne	SHORT $LL49@SHA3_Trans
; Line 71
	mov	eax, DWORD PTR _round$[ebp]
	mov	ecx, DWORD PTR _keccakf_rndc[eax*4]
	xor	DWORD PTR [ebx], ecx
	inc	eax
	mov	DWORD PTR _round$[ebp], eax
	cmp	eax, DWORD PTR [ebx+208]
	jb	$LL48@SHA3_Trans
$LN22@SHA3_Trans:
	pop	edi
	pop	esi
	pop	ebx
; Line 73
	leave
	ret	0
_SHA3_Transform ENDP
_TEXT	ENDS
PUBLIC	_SHA3_Init
; Function compile flags: /Ogspy
;	COMDAT _SHA3_Init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_type$ = 12						; size = 4
_SHA3_Init PROC						; COMDAT
; Line 79
	mov	edx, DWORD PTR _ctx$[esp-4]
; Line 80
	and	DWORD PTR [edx+200], 0
	push	edi
; Line 83
	push	25					; 00000019H
	xor	eax, eax
	pop	ecx
	mov	edi, edx
	mov	DWORD PTR [edx+208], 24			; 00000018H
	rep stosd
; Line 86
	mov	eax, DWORD PTR _type$[esp]
	sub	eax, 0
	pop	edi
	je	SHORT $LN4@SHA3_Init
	dec	eax
	dec	eax
	je	SHORT $LN3@SHA3_Init
	dec	eax
	je	SHORT $LN2@SHA3_Init
; Line 101
	mov	DWORD PTR [edx+212], 136		; 00000088H
; Line 102
	mov	DWORD PTR [edx+204], 32			; 00000020H
; Line 105
	ret	0
$LN2@SHA3_Init:
; Line 97
	mov	DWORD PTR [edx+212], 72			; 00000048H
; Line 98
	mov	DWORD PTR [edx+204], 64			; 00000040H
; Line 105
	ret	0
$LN3@SHA3_Init:
; Line 93
	mov	DWORD PTR [edx+212], 104		; 00000068H
; Line 94
	mov	DWORD PTR [edx+204], 48			; 00000030H
; Line 105
	ret	0
$LN4@SHA3_Init:
; Line 89
	mov	DWORD PTR [edx+212], 144		; 00000090H
; Line 90
	mov	DWORD PTR [edx+204], 28			; 0000001cH
; Line 105
	ret	0
_SHA3_Init ENDP
_TEXT	ENDS
PUBLIC	_SHA3_Update
; Function compile flags: /Ogspy
;	COMDAT _SHA3_Update
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_in$ = 12						; size = 4
_inlen$ = 16						; size = 4
_SHA3_Update PROC					; COMDAT
; Line 107
	push	edi
; Line 111
	xor	edi, edi
	cmp	DWORD PTR _inlen$[esp], edi
	jbe	SHORT $LN2@SHA3_Updat
	push	esi
	mov	esi, DWORD PTR _ctx$[esp+4]
$LL4@SHA3_Updat:
; Line 113
	mov	eax, DWORD PTR [esi+200]
	mov	ecx, DWORD PTR _in$[esp+4]
	mov	cl, BYTE PTR [edi+ecx]
	mov	BYTE PTR [eax+esi+216], cl
	inc	DWORD PTR [esi+200]
	mov	eax, DWORD PTR [esi+200]
; Line 115
	cmp	eax, DWORD PTR [esi+212]
	jne	SHORT $LN3@SHA3_Updat
; Line 116
	push	esi
	call	_SHA3_Transform
; Line 117
	and	DWORD PTR [esi+200], 0
	pop	ecx
$LN3@SHA3_Updat:
; Line 111
	inc	edi
	cmp	edi, DWORD PTR _inlen$[esp+4]
	jb	SHORT $LL4@SHA3_Updat
	pop	esi
$LN2@SHA3_Updat:
	pop	edi
; Line 120
	ret	0
_SHA3_Update ENDP
_TEXT	ENDS
PUBLIC	_SHA3_Final
; Function compile flags: /Ogspy
;	COMDAT _SHA3_Final
_TEXT	SEGMENT
_out$ = 8						; size = 4
_ctx$ = 12						; size = 4
_SHA3_Final PROC					; COMDAT
; Line 123
	push	esi
; Line 126
	mov	esi, DWORD PTR _ctx$[esp]
	mov	eax, DWORD PTR [esi+200]
	push	edi
	mov	BYTE PTR [esi+eax+216], 6
	jmp	SHORT $LN13@SHA3_Final
$LL5@SHA3_Final:
; Line 129
	mov	BYTE PTR [ecx+esi+216], 0
$LN13@SHA3_Final:
	inc	DWORD PTR [esi+200]
	mov	ecx, DWORD PTR [esi+200]
	cmp	ecx, DWORD PTR [esi+212]
	jb	SHORT $LL5@SHA3_Final
; Line 132
	mov	eax, DWORD PTR [esi+212]
	lea	eax, DWORD PTR [eax+esi+215]
	or	BYTE PTR [eax], 128			; 00000080H
; Line 134
	push	esi
	call	_SHA3_Transform
; Line 136
	xor	edi, edi
	pop	ecx
	cmp	DWORD PTR [esi+204], edi
	jbe	SHORT $LN1@SHA3_Final
	mov	eax, DWORD PTR _out$[esp+4]
	mov	ecx, esi
	sub	ecx, eax
$LL3@SHA3_Final:
; Line 137
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	edi
	inc	eax
	cmp	edi, DWORD PTR [esi+204]
	jb	SHORT $LL3@SHA3_Final
$LN1@SHA3_Final:
	pop	edi
	pop	esi
; Line 139
	ret	0
_SHA3_Final ENDP
_TEXT	ENDS
END
